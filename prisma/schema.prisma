generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(uuid())
  username           String       @unique
  firstName          String
  lastName           String
  displayName        String
  email              String       @unique
  passwordHash       String
  phoneNumber        String       @default("")
  streetAddress      String
  suburb             String?
  townCity           String
  postcode           String
  country            String
  avatarUrl          String?
  backgroundUrl      String?
  agreeTerms         Boolean      @default(false)
  role               UserRole     @default(USER)
  isInvigilator      Boolean      @default(false)
  examCenterId       String?
  startDate          DateTime?
  endDate            DateTime?
  examCenter         ExamCenter?  @relation("UserToExamCenter", fields: [examCenterId], references: [id])
  Session            Session[]
  studentExamCenters ExamCenter[] @relation("StudentExamCenters")

  // New relation to UserSubject
  userSubjects UserSubject[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/////////////////////////////////// Exam Center /////////////////////////////////////////////

model ExamCenter {
  id String @id @default(uuid())

  name         String
  code         String  @unique
  address      String
  suburb       String?
  townCity     String
  postcode     String
  country      String
  capacity     Int
  contactEmail String
  contactPhone String

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students     User[]        @relation("StudentExamCenters")
  staff        User[]        @relation("UserToExamCenter")
  examSessions ExamSession[]

  @@map("exam_centers")
}

model ExamSession {
  id String @id @default(uuid())

  examId String

  startTime DateTime
  endTime   DateTime
  status    ExamStatus @default(SCHEDULED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  examCenterId String
  examCenter   ExamCenter @relation(fields: [examCenterId], references: [id], onDelete: Cascade)

  @@map("exam_sessions")
}

/////////////////////////////////// Subject Models /////////////////////////////////////////

// Subject model to define available subjects

model Subject {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?
  gradeLevel  String // The grade/year level this subject is for
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to UserSubject join table
  userSubjects UserSubject[]

  @@map("subjects")
}

// Join table for many-to-many relationship between User and Subject
// with additional fields

model UserSubject {
  id String @id @default(uuid())

  enrolledAt DateTime @default(now())

  // Optional academic tracking fields
  currentGrade   Float?
  attendanceRate Float? // Percentage of attendance 
  lastAssessment DateTime?
  notes          String?

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([userId, subjectId]) // Prevents duplicate enrollments
  @@map("user_subjects")
}

////////////////////////////// ENUMS ///////////////////////////////////////
enum UserRole {
  USER
  STUDENT
  TEACHER
  SCHOOL_ADMINISTRATOR
  PRINCIPAL
  PROVINCIAL_EDUCATION_OFFICIAL
  NATIONAL_EDUCATION_DEPARTMENTOFFICIAL
  EXAM_INVIGILATOR
  SYSTEM_ADMINISTRATOR
  TECHNICAL_SUPPORT_OFFICER
  CONTENT_DEVELOPER
  SECURITY_OFFICER
  DATA_PROTECTION_OFFICER
  QUALITY_ASSURANCE_OFFICER
  EXAMINATION_BOARD_MEMBER
  PARENT_GUARDIAN
  SUPER_ADMINISTRATOR
}

enum ExamStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}
